#!/usr/bin/env python

import roslib; roslib.load_manifest('move_base_msgs')
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib import SimpleActionClient, GoalStatus
import tf, sys, random, rospy
from geometry_msgs.msg import PoseStamped
from copy import deepcopy
from random import randint
from std_msgs.msg import Bool, String
from facedetect_vicos.msg import Detection
import sensor_msgs.msg
import math



# moves the robot to position in poseStamped with targeted frame map
def move(poseStamped, target_frame="map"):
    global client
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = target_frame
    rospy.loginfo("Creating goal.")
    goal.target_pose.header.stamp = rospy.get_rostime()
    goal.target_pose.pose.position.x = poseStamped.pose.position.x
    goal.target_pose.pose.position.y = poseStamped.pose.position.y
    goal.target_pose.pose.position.z = 0.0
    goal.target_pose.pose.orientation.x = poseStamped.pose.orientation.x
    goal.target_pose.pose.orientation.y = poseStamped.pose.orientation.y
    goal.target_pose.pose.orientation.z = poseStamped.pose.orientation.z
    goal.target_pose.pose.orientation.w = poseStamped.pose.orientation.w
    rospy.loginfo("Sending goal to client.")
    client.send_goal(goal)
    rospy.loginfo("Waiting for client result...")
    client.wait_for_result()
    rospy.loginfo("Returning client state.")
    return client.get_state() == GoalStatus.SUCCEEDED

# When the point of detected face is received, transform the point to /map
# and return position so it can be later sent to move as goal 

#def startedKatanaCallback(data):
#	rospy.loginfo("Started katana operation. Navigation blocked.")
#	global navigationOnline
#	navigationOnline = False
#	navigate()
	
## Signal received when Katana completes trajectory.
#  Navigation should start again.
def retractedKatanaCallback(data):
	rospy.loginfo("Katana traj done, proceed to sleep.")
        global end_of_trajectory1
        end_of_trajectory1 = True

def retracted2KatanaCallback(data):
        rospy.loginfo("Katana traj2 done, proceed to navi.")
        global end_of_trajectory2
        rospy.loginfo("Katana end_of_trajectory2 set to True")
        end_of_trajectory2 = True
        global navigationOnline
        navigationOnline = True
        enable_face_detect_pub.publish(1)
        rospy.loginfo("End of second trajectory2.")
        moveToFacePoint()
        navigate()

def faceDetectedCallback(data):
	rospy.loginfo("Face detected.")

            
def faceLocationCallback(data):
       rospy.loginfo("Face coordinates recieved.")
       global navigationOnline
       navigationOnline = False
       rospy.loginfo("Navigation offline, stopped.")
       centerFace = int(data.x) + int(data.w/2)
       print "Center face: " + str(centerFace)
       global ranges
       justMoveKatana = False
       #print len(ranges)
       #print int(len(ranges)/2)
       
       if centerFace > 480/2:
	 offset = int(len(ranges)/2) + (int(480/2) - centerFace)
	 #print offset
	 # take range at offset
	 moveForward = ranges[offset] - 0.7
	 if (moveForward < 0.7) or (math.isnan(moveForward)):
	   justMoveKatana = True
	 print moveForward
       else: 
         offset = int(len(ranges)/2) - (int(480/2) - centerFace)
         #print offset
         moveForward = ranges[offset] - 0.7
         if (moveForward < 0.7) or (math.isnan(moveForward)):
	   justMoveKatana = True
         print moveForward
         
       m = PoseStamped()
       m.pose.position.x = moveForward 
       m.pose.orientation.w = 1.0
       m.header.frame_id = "base"
       rospy.loginfo("Calling move.")
       #moveToFacePoint()
       if justMoveKatana:
	  rospy.loginfo("Just moving katana arm.")
          navigationOnline = False
	  moveKatanaArm()
       else:
	  rospy.loginfo("Calling move base when detected face.")
	  move(m, "base")
          moveKatanaArm()
       
def laserDetectionCallBack(scan):
      #rospy.loginfo("laser input detected")
      laserScan = scan
      global ranges
      ranges = laserScan.ranges

def moveToFacePoint():
    m = PoseStamped()
    m.pose.position.x = -0.35
    m.pose.orientation.w = 1.0
    m.header.frame_id = "map" #was bae but tests if id and target musn't be same
    rospy.loginfo("Calling move.")
    move(m, "base")

## Generate a random point from start to end-1, excluding currentNumber.
#  warning: the number of points should be at least 3
def generateRandom(currentNumber, end, start = 1):
    r = range(start, currentNumber) + range(currentNumber+1, end)
    return random.choice(r)

## Randomly select a point excluding the one at which the robot is at
#  then send the point as navigation goal.
def moveToPoints(basePoint, points, currentNumber = 1):
    randomPointIdx = generateRandom(currentNumber,6)
    currentNumber = randomPointIdx
    randomPoint = points[randomPointIdx]
    rospy.loginfo("Selected point " + str(randomPointIdx))
    goalPoint = PoseStamped()
    goalPoint.pose.position.x = randomPoint[0]
    goalPoint.pose.position.y = randomPoint[1]
    goalPoint.pose.position.z = 0.0
    goalPoint.pose.orientation.x = randomPoint[2]
    goalPoint.pose.orientation.y = randomPoint[3]
    goalPoint.pose.orientation.z = randomPoint[4]
    goalPoint.pose.orientation.w = randomPoint[5]
    goalPoint.header.frame_id = "base"
    rospy.loginfo("Sending point as goal, calling move.")
    move(goalPoint, "map")

    
def moveKatanaArm():
	# when face point reached on map, broadcast start trajectory
	global navigationOnline
        global end_of_trajectory1
        global end_of_trajectory2
	navigationOnline = False
	rospy.loginfo("Navigation offline, stopped.")
        rospy.loginfo("Publishing start of first trajectory.")
	start_trajectory_pub.publish(1)
        counterLoop1 = 0
        while (not end_of_trajectory1) and (counterLoop1 < 10): 
            # wait for trajectory1 to complete
            rospy.sleep(1.0)
            counterLoop1 +=1
            print str(counterLoop1) + " loop 1" 
            #rospy.loginfo("Still waiting for end of trajectory1..")
        end_of_trajectory1 = False
        rospy.loginfo("Sleeping for 4 seconds")
	# sleep for 8 secs
        rospy.sleep(4.0)
        rospy.loginfo("End of sleep.")
        rospy.loginfo("Publishing second trajectory.")
	# call second retraction trajectory
	start_trajectory2_pub.publish(1)
	counterLoop = 0
        while (not end_of_trajectory2) and (counterLoop < 10):
            #wait for second trajectory to complete
            rospy.sleep(1.0)
            counterLoop += 1
            print str(counterLoop) + " loop 2"
        rospy.loginfo("Outside of loop for second trajectory")
        enable_face_detect_pub.publish(1)
            #rospy.loginfo("Still waiting for end of trajectory2..")
        global navigationOnline
        navigationOnline = True
        #navigate()
### Move ATRV to relative points
# point = (x,y, x,y,z,w) = (position,quaternion)
# the points should be relative to the basePoint 
# that the user selects using 2d pose estimate
def navigate():
        global end_of_trajectory2
        end_of_trajectory2 = False
	if navigationOnline:
		rospy.loginfo("Navigation online, starting..")
	else:   rospy.loginfo("Navigation offline, stopped.")
	while navigationOnline:
		basePoint = (-0.422, 0.875, -0.980, 0.0, 0.0, 0.0)
		points = {
    			1: ( 0.0, 0.0, 0.0, 0.0, -0.856375438851, 0.516353665362),
    			2: (-0.549, 0.586, 0.000, 0.000, 0.000, 0.782, 0.522),
    			3: (0.128, 0.176, 0.000, 0.000, 0.000, 0.756, 0.655),
    			4: (0.212, 0.438, 0.0, 0.0, 0.858, 0.514),
                        5: (1.529, 0.933, 0.0, 0.0, 0.883, 0.469),
                        6: (2.064, 0.485, 0.0, 0.0, 0.129, 0.992)
			}
		rospy.sleep(2)
		rospy.loginfo("Navigation while loop running.")
		moveToPoints(basePoint, points)
		#moveKatanaArm()


##### Start node and initialize ######
rospy.loginfo("Starting node: atrv_navigate...")
rospy.init_node('atrv_navigate')
client = SimpleActionClient('move_base', MoveBaseAction)
rospy.loginfo("Waiting for client action server (start amcl?)...")
client.wait_for_server()
rospy.loginfo("Client action server detected.")

##### Subscribers ######
rospy.loginfo("Generating subscribers...")
## Subscriber for the katana topic, gives the signal that katana
#  operation is starting and navigation should be blocked.
#rospy.Subscriber("/katana/started", Bool, startedKatanaCallback)

## Subscriber for the katana topic, gives the signal that katana
#  operation has finished and navigation should start again.
rospy.Subscriber("/katana/retracted", Bool, retractedKatanaCallback)
rospy.Subscriber("/katana/retracted2", Bool, retracted2KatanaCallback)
## Subscriber for face detection signal, gives the signal to
#  initialize transformation from camera to map and start navigation.
rospy.Subscriber("/face_detection/detected", Bool, faceDetectedCallback)
##
#
rospy.Subscriber("/face_detection/location", Detection, faceLocationCallback)
##
#
laser_sub = rospy.Subscriber("/scan", sensor_msgs.msg.LaserScan, laserDetectionCallBack)


##### Publishers #######
rospy.loginfo("Generating publishers...")
start_trajectory_pub = rospy.Publisher("/katana/start_trajectory", Bool)
start_trajectory2_pub = rospy.Publisher("/katana/start_trajectory2", Bool)
enable_face_detect_pub = rospy.Publisher("/face_detection/start", Bool)
enable_face_detect_pub.publish(1)
disable_face_detect_pub = rospy.Publisher("/face_detection/stop", Bool)


##### Global variables ######
# Controls navigation
navigationOnline = True
end_of_trajectory1 = False
end_of_trajectory2 = False
rospy.loginfo("Starting face detection.")
enable_face_detect_pub.publish(1)

#### Start the whole thing ####
rospy.loginfo("Starting navigation " + str(navigationOnline))
navigate()
tf2 = tf.TransformListener()
rospy.spin()
